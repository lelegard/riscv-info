#-----------------------------------------------------------------------------
#
#  RISCV-INFO - Collect information on RISC-V processor
#  Copyright (c) 2025, Thierry Lelegard
#  BSD-2-Clause license, see https://opensource.org/license/BSD-2-Clause
#
#-----------------------------------------------------------------------------

# The base architecture contains the following letters.
flags:
  A: Atomic instructions
  B: Bit manipulation
  C: Compressed instructions
  D: Double-precision floating-point
  E: Integer instructions (embedded)
  F: Single-precision floating-point
  H: Hypervisor
  I: Integer instructions
  J: Dynamically translated languages
  L: Decimal floating-point
  M: Integer multiplication and division
  N: User-level interrupts
  P: Packed-SIMD instructions
  Q: Quad-precision floating-point
  S: Supervisor mode
  T: Transactional memory
  V: Vector operations

# Shorthands for architecture flags.
shorthands:
  G: IMAFD

# Known RISC-V extensions.
# Feel free to submit contributions to supplement it (keep the list sorted).
extensions:
  Sdext: Debug extension
  Sdtrig: Debug triggers
  Sha: Augmented hypervisor
  Shcounterenw: Support writeable enables for any supported counter
  Shgatpa: SvNNx4 mode supported for all modes supported by satp, as well as Bare
  Shtvala: htval provides all needed values
  Shvsatpa: vsatp supports all modes supported by satp
  Shvstvala: vstval provides all needed values
  Shvstvecd: vstvec supports Direct mode
  Sm1p11: Machine-level architecture v1.11
  Sm1p12: Machine-level architecture v1.12
  Sm1p13: Machine-level architecture v1.13
  Smaia: Machine-level advanced interrupt architecture
  Smcdeleg: Machine-level counter delegation
  Smcntrpmf: Cycle and instret privilege mode filtering
  Smcsrind: Machine-level indirect CSR access
  Smctr: Control transfer records, machine and supervisor modes
  Smdbltrp: Address double trap in Machine-level
  Smepmp: Machine-level memory access and execution prevention
  Smmpm: Machine-level pointer masking for Machine-level
  Smnpm: Machine-level pointer masking for next lower privilege
  Smrnmi: Resumable Non-Maskable Interrupts
  Smstateen: Machine-level view of the state-enable
  Ss1p11: Supervisor-level architecture v1.11
  Ss1p12: Supervisor-level architecture v1.12
  Ss1p13: Supervisor-level architecture v1.13
  Ssaia: Supervisor-level advanced interrupt architecture
  Ssccfg: Supervisor-level counter configuration
  Ssccptr: Main memory supports page table reads
  Sscdeleg: Supervisor-level counter delegation
  Sscofpmf: Count overflow and mode-based filtering
  Sscounterenw: Support writeable enables for any supported counter
  Sscsrind: Supervisor-level indirect CSR access
  Ssctr: Control Transfer Records, supervisor mode only
  Ssdbltrp: Address double trap at privilege modes lower than Machine
  Ssnpm: Supervisor-level pointer masking for next lower privilege
  Sspm: Indicates that there is pointer-masking support in supervisor mode
  Ssqosid: Quality-of-Service (QoS) identifiers
  Ssstateen: Supervisor-level view of the state-enable
  Ssstrict: Unimplemented reserved encodings raise illegal instruction exceptions
  Sstc: Supervisor-level timer interrupts
  Sstvala: stval provides all needed values
  Sstvecd: stvec supports direct mode
  Ssu64xl: UXLEN=64 must be supported
  Supm: Indicates that there is pointer-masking support in user mode
  Sv32: Page-based 32-bit virtual-memory system
  Sv39: Page-based 39-bit virtual-memory system
  Sv48: Page-based 48-bit virtual-memory system
  Sv57: Page-based 57-bit virtual-memory system
  Svade: Raise exceptions on improper A/D bits
  Svadu: Hardware updating of A/D Bits
  Svbare: Bare mode virtual-memory translation supported
  Svinval: Fine-grained address-translation cache invalidation
  Svnapot: NAPOT translation contiguity
  Svpbmt: Page-based memory types
  Svrsw60t59b: PTE reserved-for-software bits 60-59
  Svvptc: Obviating memory-management instructions after marking PTEs valid
  Zaamo: Atomic memory operations
  Za128rs: Reservation set size of 128 bytes
  Za64rs: Reservation set size of 64 bytes
  Zabha: Byte and halfword atomic memory operations
  Zacas: Atomic compare-and-swap (CAS) instructions
  Zalrsc: Load-reserved/store-conditional
  Zama16b: Atomic misaligned acces to main memory regions that do not cross aligned 16-byte boundary
  Zawrs: Wait-on-reservation-set instructions
  Zba: Address computation
  Zbb: Bit manipulation
  Zbc: Carryless multiplication
  Zbkb: Bit manipulation for cryptography
  Zbkc: Carryless multiplication for cryptography
  Zbkx: Crossbar permutation
  Zbkb: Manipulation for cryptography
  Zbkc: Carryless multiplication for cryptography
  Zbkx: Crossbar permutation
  Zbs: Single-bit manipulation
  Zca: Compressed instructions
  Zcb: Additional compressed instructions
  Zcd: Compressed double precision FP loads and stores
  Zce: Compressed instructions for embedded microcontrollers
  Zcf: Compressed single precision FP loads and stores (RV32 only)
  Zclsd: Compressed load/store pair instructions
  Zcmop: Compressed may-be-operations
  Zcmp: Compressed function call prologues and epilogues
  Zcmt: Compressed static function calls
  Zdinx: Double-precision FP in X-registers
  Zfa: Additional FP instructions
  Zfbfmin: Scalar BF16 converts
  Zfh: Half-precision FP
  Zfhmin: Minimal half-precision FP
  Zfinx: Single-precision FP in X-registers
  Zhinx: Half-precision FP in X-registers
  Zhinxmin: Minimal half-precision FP in X-registers
  Zic64b: Cache block size is 64 bytes
  Zicbom: Cache-block management
  Zicbop: Cache-block prefetching
  Zicboz: Cache-block zeroing
  Ziccamoa: Main memory supports all atomics in A
  Ziccamoc: Main memory supports atomics in Zacas
  Ziccif: Main memory supports instruction fetch with atomicity requirement
  Zicclsm: Main memory supports misaligned loads/stores
  Ziccrse: Main memory supports forward progress on LR/SC sequences
  Zicfilp: Landing pads
  Zicfiss: Shadow stack
  Zicond: Integer conditional operations
  Zicntr: Basic performance counters
  Zicsr: Control and Status Register instructions
  Zifencei: Instruction-fetch fence instruction
  Zihintntl: Non-temporal locality hints
  Zihintpause: Pause Hint
  Zihpm: Hardware performance counters
  Zilsd: Load/Store pair instructions
  Zimop: may-be-operations
  Zk: Standard scalar cryptography
  Zkn: NIST cryptography
  Zknd: AES decryption
  Zkne: AES encryption
  Zknh: SHA2 hashing
  Zkr: Entropy source
  Zks: ShangMi (SM) cryptography
  Zksed: SM4 block cypher
  Zksh: SM3 hashing
  Zkt: Data-independent execution latency
  Zmmul: Multiplication subset of M (MUL, MULH, MULHU, MULHSU, MULW)
  Ztso: RISC-V total store ordering (RVTSO)
  Zvbb: Vector basic bit-manipulation
  Zvbc: Vector carryless multiplication
  Zve: Embedded vector extension
  Zve32f: Embedded vectors (32-bit int, 32-bit FP)
  Zve32x: Embedded vectors (32-bit int)
  Zve64d: Embedded vectors (64-bit int, 64-bit FP)
  Zve64f: Embedded vectors (64-bit int, 32-bit FP)
  Zve64x: Embedded vectors (64-bit int)
  Zvfbfmin: Vector BF16 converts
  Zvfbfwma: Vector BF16 widening mul-add
  Zvfh: Vector half-precision FP
  Zvfhmin: Vector for minimal half-precision FP
  Zvkb: Vector cryptography bit-manipulation
  Zvkg: Vector cryptography GCM/GMAC
  Zvkn: NIST algorithm suite
  Zvknc: NIST suite with carryless multiply
  Zvkned: NIST suite vector AES block cipher
  Zvkng: NIST suite vector AES with GCM
  Zvknha: NIST suite vector SHA-2 secure hash (SHA-256 only)
  Zvknhb: NIST suite vector SHA-2 secure hash (SHA-256, SHA-512)
  Zvks: ShangMi (SM) algorithm suite
  Zvksc: ShangMi suite with carryless multiplication
  Zvksed: ShangMi suite SM4 block cipher
  Zvksg: ShangMi suite with GCM
  Zvksh: ShangMi suite SM3 secure hash
  Zvkt: Vector data-independent execution latency
  Zvl: Vector extension
  Zvl32b: 32-bit vectors
  Zvl64b: 64-bit vectors
  Zvl128b: 128-bit vectors
  Zvl256b: 256-bit vectors
  Zvl512b: 512-bit vectors
  Zvl1024b: 1024-bit vectors

# Known RISC-V profiles.
profiles:

  RVI20U32:
    description: Generic 32-bit unprivileged execution environments
    bits: 32
    endian: little
    flags:
      mandatory: I
      optional:  MAFDC
    extensions:
      optional: [Zifencei, Zicntr, Zihpm]

  RVI20U64:
    description: Generic 64-bit unprivileged execution environments
    bits: 64
    endian: little
    flags:
      mandatory: I
      optional:  MAFDC
    extensions:
      optional: [Zifencei, Zicntr, Zihpm]

  RVA20U64:
    description: 64-bit application processors, user mode, 2020
    bits: 64
    endian: little
    flags:
      mandatory: IMAFDC
    extensions:
      mandatory: [Zicsr, Zicntr, Ziccif, Ziccrse, Ziccamoa, Za128rs, Zicclsm]
      optional: [Zihpm]

  RVA20S64:
    description: 64-bit application processors, supervisor mode, 2020
    bits: 64
    endian: little
    flags:
      mandatory: IMAFDC
    extensions:
      mandatory: [Zicsr, Zicntr, Ziccif, Ziccrse, Ziccamoa, Za128rs, Zicclsm,
                  Zifencei, Ss1p11, Svbare, Svade, Ssccptr, Sstvecd, Sstvala]
      optional:  [Zihpm, Sv48, Ssu64xl]

  RVA22U64:
    description: 64-bit application processors, user mode, 2022
    bits: 64
    endian: little
    flags:
      mandatory: IMAFDC
      optional:  V
    extensions:
      mandatory: [Zicsr, Zicntr, Zihpm, Ziccif, Ziccrse, Ziccamoa, Za64rs, Zicclsm,
                  Zihintpause, Zba, Zbb, Zbs, Zic64b, Zicbom, Zicbop, Zicboz, Zfhmin, Zkt]
      optional:  [Zfh, Zkn, Zks]

  RVA22S64:
    description: 64-bit application processors, supervisor mode, 2022
    bits: 64
    endian: little
    flags:
      mandatory: IMAFDC
      optional:  VH
    extensions:
      mandatory: [Zicsr, Zicntr, Zihpm, Ziccif, Ziccrse, Ziccamoa, Za64rs, Zicclsm,
                  Zihintpause, Zba, Zbb, Zbs, Zic64b, Zicbom, Zicbop, Zicboz, Zfhmin, Zkt,
                  Zifencei, Ss1p12, Svbare, Sv39, Svade, Ssccptr, Sstvecd, Sstvala, Sscounterenw, Svpbmt, Svinval]
      optional:  [Zfh, Zkn, Zks, Sv48, Sv57, Svnapot, Ssu64xl, Sstc, Sscofpmf, Zkr,
                  Ssstateen, Shcounterenw, Shvstvala, Shtvala, Shvstvecd, Shvsatpa, Shgatpa]

  RVA23U64:
    description: 64-bit application processors, user mode, 2023
    bits: 64
    endian: little
    flags:
      mandatory: IMAFDCBV
    extensions:
      mandatory: [Zicsr, Zicntr, Zihpm, Ziccif, Ziccrse, Ziccamoa, Za64rs, Zicclsm,
                  Zihintpause, Zic64b, Zicbom, Zicbop, Zicboz, Zfhmin, Zvfhmin,
                  Zvbb, Zvkt, Zihintntl, Zicond, Zimop, Zcmop, Zcb, Zfa, Zawrs, Supm]
      optional:  [Zvkng, Zvksg, Zabha, Zacas, Ziccamoc, Zvbc, Zama16b, Zfh, Zbc, Zicfilp, Zicfiss,
                  Zvfh, Zfbfmin, Zvfbfmin, Zvfbfwma]

  RVA23S64:
    description: 64-bit application processors, supervisor mode, 2023
    bits: 64
    endian: little
    flags:
      mandatory: IMAFDCBVH
    extensions:
      mandatory: [Zicsr, Zicntr, Zihpm, Ziccif, Ziccrse, Ziccamoa, Za64rs, Zicclsm,
                  Zihintpause, Zic64b, Zicbom, Zicbop, Zicboz, Zfhmin, Zvfhmin,
                  Zvbb, Zvkt, Zihintntl, Zicond, Zimop, Zcmop, Zcb, Zfa, Zawrs, Supm,
                  Zifencei, Ss1p13, Svbare, Sv39, Svade, Ssccptr, Sstvecd, Sstvala, Sscounterenw, Svpbmt, Svinval,
                  Svnapot, Sstc, Sscofpmf, Ssnpm, Ssu64xl, Sha, Ssstateen, Shcounterenw, Shvstvala, Shtvala,
                  Shvstvecd, Shvsatpa, Shgatpa]
      optional:  [Sv48, Sv57, Zkr, Svadu, Sdtrig, Ssstrict, Svvptc, Sspm]

  RVB23U64:
    description: Customized 64-bit application processors, user mode, 2023
    bits: 64
    endian: little
    flags:
      mandatory: IMAFDCB
      optional: V
    extensions:
      mandatory: [Zicsr, Zicntr, Zihpm, Ziccif, Ziccrse, Ziccamoa, Za64rs, Zicclsm, Zihintpause,
                  Zic64b, Zicbom, Zicbop, Zicboz, Zkt, Zihintntl, Zicond, Zimop, Zcmop, Zcb, Zfa, Zawrs]
      optional:  [Zvkng, Zvksg, Zvkg, Zvknc, Zvksc, Zkn, Zks, Zabha, Zacas, Ziccamoc, Zama16b, Zfhmin,
                  Zvbb, Zvkt, Supm, Zfh, Zbc, Zicfilp, Zicfiss, Zvfh, Zfbfmin, Zvfbfmin, Zvfbfwma, Zvbc]

  RVB23S64:
    description: Customized 64-bit application processors, supervisor mode, 2023
    bits: 64
    endian: little
    flags:
      mandatory: IMAFDCB
      optional: VH
    extensions:
      mandatory: [Zicsr, Zicntr, Zihpm, Ziccif, Ziccrse, Ziccamoa, Za64rs, Zicclsm, Zihintpause,
                  Zic64b, Zicbom, Zicbop, Zicboz, Zkt, Zihintntl, Zicond, Zimop, Zcmop, Zcb, Zfa, Zawrs,
                  Zifencei, Ss1p13, Svnapot, Sv39, Svade, Ssccptr, Sstvecd, Sstvala, Sscounterenw,
                  Svpbmt, Svinval, Sstc, Sscofpmf, Ssu64xl]
      optional:  [Zvkng, Zvksg, Zvkg, Zvknc, Zvksc, Zkn, Zks, Zabha, Zacas, Ziccamoc, Zama16b, Zfhmin,
                  Zvbb, Zvkt, Supm, Zfh, Zbc, Zicfilp, Zicfiss, Zvfh, Zfbfmin, Zvfbfmin, Zvfbfwma, Zvbc,
                  Sha, Sv48, Sv57, Zkr, Svadu, Sdtrig, Ssstrict, Svvptc, Sspm]
